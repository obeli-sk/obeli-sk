name: test
permissions:
  contents: read
  issues: read
  checks: write
  pull-requests: write

# This configuration allows maintainers of this repo to create a branch and pull request based on
# the new branch. Restricting the push trigger to the main branch ensures that the PR only gets
# built once.
on:
  push:
    branches:
      - main
  pull_request:
# If new code is pushed to a PR branch, then cancel in progress workflows for that PR.

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  ci-test-nosim:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
      - id: git-info
        run: |
          echo "sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
          echo "branch=$(git rev-parse --abbrev-ref HEAD)" >> $GITHUB_OUTPUT
      - name: Install Nix
        uses: cachix/install-nix-action@v26
        with:
          extra_nix_config: "access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}"
      - name: Load nix store
        run: nix develop --command echo
      - name: Build tests
        run: nix develop --command cargo nextest run --no-run
        env:
          RUSTFLAGS: "--cfg tracing_unstable"
      - name: cargo test
        run: nix develop --command cargo nextest run --workspace --profile ${{ github.job }} --no-capture --filter-expr '!test(/perf/)'
        env:
          RUSTFLAGS: "--cfg tracing_unstable"
          RUST_LOG: "info,executor=trace,wasm_workers=trace,db=info"
      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          check_name: Test results - nosim
          files: |
            target/nextest/${{ github.job }}/junit.xml

  ci-test-madsim:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
      - id: git-info
        run: |
          echo "sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
          echo "branch=$(git rev-parse --abbrev-ref HEAD)" >> $GITHUB_OUTPUT
      - name: Install Nix
        uses: cachix/install-nix-action@v26
        with:
          extra_nix_config: "access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}"
      - name: Load nix store
        run: nix develop --command echo
      - name: Build tests
        run: nix develop --command cargo nextest run --no-run
        env:
          RUSTFLAGS: "--cfg madsim --cfg tracing_unstable"
      - name: cargo test
        run: nix develop --command cargo nextest run --workspace --profile ${{ github.job }} --no-capture --filter-expr '!test(/perf/)'
        env:
          RUSTFLAGS: "--cfg madsim --cfg tracing_unstable"
          RUST_LOG: "info,executor=trace,wasm_workers=trace,db=info"
      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          check_name: Test results - madsim
          files: |
            target/nextest/${{ github.job }}/junit.xml
