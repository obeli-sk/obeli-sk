# [package]
# name = "workflow-cli"
# version.workspace = true
# authors.workspace = true
# categories = ["wasm"]
# keywords = ["webassembly", "wasm"]
# readme = "README.md"
# edition.workspace = true
# rust-version.workspace = true

# [dependencies]
# concepts.workspace = true
# runtime.workspace = true
# val-json.workspace = true

# anyhow.workspace = true
# tokio = { workspace = true, features = ["full"] }
# tracing-subscriber.workspace = true
# wasmtime = { workspace = true, features = ["parallel-compilation"] }

[workspace]
resolver = "2"
members = [
    "crates/concepts",
    "crates/scheduler",
    "crates/testing/cargo-component-builder",
    "crates/testing/test-programs/fibo/activity",
    "crates/testing/test-programs/fibo/activity/builder",
    "crates/testing/test-programs/fibo/workflow",
    "crates/testing/test-programs/fibo/workflow/builder",
    "crates/testing/test-programs/http/activity",
    "crates/testing/test-programs/http/activity/builder",
    "crates/testing/test-programs/http/workflow",
    "crates/testing/test-programs/http/workflow/builder",
    "crates/testing/test-programs/noop/activity",
    "crates/testing/test-programs/noop/activity/builder",
    "crates/testing/test-programs/noop/workflow",
    "crates/testing/test-programs/noop/workflow/builder",
    "crates/testing/test-programs/patch/activity-broken",
    "crates/testing/test-programs/patch/activity-broken/builder",
    "crates/testing/test-programs/patch/activity-fixed",
    "crates/testing/test-programs/patch/activity-fixed/builder",
    "crates/testing/test-programs/patch/workflow",
    "crates/testing/test-programs/patch/workflow/builder",
    "crates/testing/test-programs/sleep/activity",
    "crates/testing/test-programs/sleep/activity/builder",
    "crates/testing/test-programs/sleep/workflow",
    "crates/testing/test-programs/sleep/workflow/builder",
    "crates/testing/test-utils",
    "crates/utils",
    "crates/val-json",
    "crates/wasm-workers",
]

[workspace.package]
version = "0.1.0"
authors = ["Project Developers"]
edition = "2021"
rust-version = "1.73.0"

[workspace.dependencies]
cargo-component-builder.path = "crates/testing/cargo-component-builder"
concepts.path = "crates/concepts"
scheduler.path = "crates/scheduler/"
test-programs-fibo-activity-builder.path = "crates/testing/test-programs/fibo/activity/builder"
test-programs-fibo-workflow-builder.path = "crates/testing/test-programs/fibo/workflow/builder"
test-programs-http-get-activity-builder.path = "crates/testing/test-programs/http/activity/builder"
test-programs-http-get-workflow-builder.path = "crates/testing/test-programs/http/workflow/builder"
test-programs-noop-activity-builder.path = "crates/testing/test-programs/noop/activity/builder"
test-programs-noop-workflow-builder.path = "crates/testing/test-programs/noop/workflow/builder"
test-programs-patch-activity-broken-builder.path = "crates/testing/test-programs/patch/activity-broken/builder"
test-programs-patch-activity-fixed-builder.path = "crates/testing/test-programs/patch/activity-fixed/builder"
test-programs-patch-workflow-builder.path = "crates/testing/test-programs/patch/workflow/builder"
test-programs-sleep-activity-builder.path = "crates/testing/test-programs/sleep/activity/builder"
test-programs-sleep-workflow-builder.path = "crates/testing/test-programs/sleep/workflow/builder"
test-utils.path = "crates/testing/test-utils/"
utils.path = "crates/utils/"
val-json.path = "crates/val-json"


anyhow = { version = "1.0", features = ["backtrace"] }
arbitrary = { version = "1.3.2", features = ["derive"] }
assert_matches = "1.5.0"
async-channel = "2.1.1"
async-trait = "0.1"
cargo_metadata = "0.18"
cfg-if = "1.0.0"
chrono = "0.4.34"
criterion = "0.5"
derivative = "2.2.0"
derive_more = "0.99.17"
futures-util = "0.3.30"
getrandom = "=0.2.11" # For madsim patch
hashbrown = "0.14.3"
http-body-util = "0.1"
hyper = "1.1.0"
hyper-util = "0.1"
indexmap = "2.1"
lazy_static = "1.4"
madsim = "0.2.25"
rstest = "0.18.2"
serde = { version = "1.0.193", features = ["derive"] }
serde_json = "1.0.108"
strum = { version = "0.26.0", features = ["derive"] }
thiserror = "1.0"
tokio = { version = "0.2", package = "madsim-tokio" }
tracing = { version = "0.1", features = ["log"] }
tracing-chrome = "0.7.1"
tracing-subscriber = { version = "0.3.18", features = ["env-filter"] }
tracing-unwrap = { version = "0.10", features = ["log-location"] }
ulid = "1.1.0"
valuable = { version = "0.1.0", features = ["derive"] }
wasmtime = { version = "17.0", default-features = false, features = [
    # remove "parallel-compilation"
    "component-model",
    "addr2line",
    "async",
    "cache",
    "component-model",
    "coredump",
    "cranelift",
    "debug-builtins",
    "demangle",
    "pooling-allocator",
    "profiling",
    "wat",
] }
wasmtime-wasi = "17.0"
wasmtime-wasi-http = "17.0"
wast = "201.0.0"
wiremock = "0.6"
wit-bindgen = { version = "0.17.0", default-features = false, features = [
    "realloc",
] }
wit-component = "0.20"
wit-parser = "0.13"

[patch.crates-io]
getrandom = { git = "https://github.com/madsim-rs/getrandom.git", rev = "e79a7aecbcf8a43a802d30742667b77d75c613bd" } # madsim

[workspace.lints]
# lower the priority to allow overriding later
clippy.all = { level = "deny", priority = -1 }
clippy.dbg_macro = "deny"
clippy.pedantic = { level = "deny", priority = -1 }
rust.unknown_lints = "deny"

clippy.explicit_deref_methods = "allow"     # Lots of false positives.
clippy.missing_errors_doc = "allow"         # Allow missing docs for now
clippy.missing_panics_doc = "allow"         # Allow missing docs for now
clippy.trivially_copy_pass_by_ref = "allow" # Lots of false positives.

# [lints]
# workspace = true
