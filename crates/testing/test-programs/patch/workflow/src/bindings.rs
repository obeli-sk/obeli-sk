#![allow(dead_code)]
// Generated by `wit-bindgen` 0.16.0. DO NOT EDIT!
pub mod testing {
  pub mod patch {
    
    #[allow(clippy::all)]
    pub mod patch {
      #[used]
      #[doc(hidden)]
      #[cfg(target_arch = "wasm32")]
      static __FORCE_SECTION_REF: fn() = super::super::super::__link_section;
      #[allow(unused_unsafe, clippy::all)]
      pub fn noop(i: u32,){
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "testing:patch/patch")]
          extern "C" {
            #[link_name = "noop"]
            fn wit_import(_: i32, );
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: i32, ){ unreachable!() }
          wit_import(wit_bindgen::rt::as_i32(i));
        }
      }
      
    }
    
  }
}
pub mod exports {
  pub mod testing {
    pub mod patch_workflow {
      
      #[allow(clippy::all)]
      pub mod workflow {
        #[used]
        #[doc(hidden)]
        #[cfg(target_arch = "wasm32")]
        static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_section;
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "testing:patch-workflow/workflow#noopa"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_noopa(arg0: i32,) {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            <_GuestImpl as Guest>::noopa(arg0 as u32);
          }
        };
        use super::super::super::super::super::Component as _GuestImpl;
        pub trait Guest {
          fn noopa(iterations: u32,);
        }
        
      }
      
    }
  }
}

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:any"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 352] = [3, 0, 3, 97, 110, 121, 0, 97, 115, 109, 13, 0, 1, 0, 7, 69, 1, 65, 2, 1, 66, 2, 1, 64, 1, 10, 105, 116, 101, 114, 97, 116, 105, 111, 110, 115, 121, 1, 0, 4, 0, 5, 110, 111, 111, 112, 97, 1, 0, 4, 1, 31, 116, 101, 115, 116, 105, 110, 103, 58, 112, 97, 116, 99, 104, 45, 119, 111, 114, 107, 102, 108, 111, 119, 47, 119, 111, 114, 107, 102, 108, 111, 119, 5, 0, 11, 14, 1, 0, 8, 119, 111, 114, 107, 102, 108, 111, 119, 3, 0, 0, 7, 147, 1, 1, 65, 2, 1, 65, 4, 1, 66, 2, 1, 64, 1, 1, 105, 121, 1, 0, 4, 0, 4, 110, 111, 111, 112, 1, 0, 3, 1, 19, 116, 101, 115, 116, 105, 110, 103, 58, 112, 97, 116, 99, 104, 47, 112, 97, 116, 99, 104, 5, 0, 1, 66, 2, 1, 64, 1, 10, 105, 116, 101, 114, 97, 116, 105, 111, 110, 115, 121, 1, 0, 4, 0, 5, 110, 111, 111, 112, 97, 1, 0, 4, 1, 31, 116, 101, 115, 116, 105, 110, 103, 58, 112, 97, 116, 99, 104, 45, 119, 111, 114, 107, 102, 108, 111, 119, 47, 119, 111, 114, 107, 102, 108, 111, 119, 5, 1, 4, 1, 26, 116, 101, 115, 116, 105, 110, 103, 58, 112, 97, 116, 99, 104, 45, 119, 111, 114, 107, 102, 108, 111, 119, 47, 97, 110, 121, 4, 0, 11, 9, 1, 0, 3, 97, 110, 121, 3, 2, 0, 0, 16, 12, 112, 97, 99, 107, 97, 103, 101, 45, 100, 111, 99, 115, 0, 123, 125, 0, 70, 9, 112, 114, 111, 100, 117, 99, 101, 114, 115, 1, 12, 112, 114, 111, 99, 101, 115, 115, 101, 100, 45, 98, 121, 2, 13, 119, 105, 116, 45, 99, 111, 109, 112, 111, 110, 101, 110, 116, 6, 48, 46, 49, 56, 46, 50, 16, 119, 105, 116, 45, 98, 105, 110, 100, 103, 101, 110, 45, 114, 117, 115, 116, 6, 48, 46, 49, 54, 46, 48];

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_section() {}
