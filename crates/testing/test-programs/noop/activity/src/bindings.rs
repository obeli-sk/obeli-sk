// Generated by `wit-bindgen` 0.21.0. DO NOT EDIT!
// Options used:
pub mod exports {
    pub mod testing {
        pub mod noop {
            #[allow(clippy::all)]
            pub mod noop {
                #[used]
                #[doc(hidden)]
                #[cfg(target_arch = "wasm32")]
                static __FORCE_SECTION_REF: fn() =
                    super::super::super::super::__link_custom_section_describing_imports;
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_noop_cabi<T: Guest>() {
                    T::noop();
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_noop2_cabi<T: Guest>() {
                    T::noop2();
                }
                pub trait Guest {
                    fn noop();
                    fn noop2();
                }
                #[doc(hidden)]

                macro_rules! __export_testing_noop_noop_cabi{
      ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

        #[export_name = "testing:noop/noop#noop"]
        unsafe extern "C" fn export_noop() {
          $($path_to_types)*::_export_noop_cabi::<$ty>()
        }
        #[export_name = "testing:noop/noop#noop2"]
        unsafe extern "C" fn export_noop2() {
          $($path_to_types)*::_export_noop2_cabi::<$ty>()
        }
      };);
    }
                #[doc(hidden)]
                pub(crate) use __export_testing_noop_noop_cabi;
            }
        }
    }
}

/// Generates `#[no_mangle]` functions to export the specified type as the
/// root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]

macro_rules! __export_any_impl {
  ($ty:ident) => (self::export!($ty with_types_in self););
  ($ty:ident with_types_in $($path_to_types_root:tt)*) => (
  $($path_to_types_root)*::exports::testing::noop::noop::__export_testing_noop_noop_cabi!($ty with_types_in $($path_to_types_root)*::exports::testing::noop::noop);
  )
}
#[doc(inline)]
pub(crate) use __export_any_impl as export;

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.21.0:any:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 192] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07G\x01A\x02\x01A\x02\x01\
B\x03\x01@\0\x01\0\x04\0\x04noop\x01\0\x04\0\x05noop2\x01\0\x04\x01\x11testing:n\
oop/noop\x05\0\x04\x01\x0bany:any/any\x04\0\x0b\x09\x01\0\x03any\x03\0\0\0G\x09p\
roducers\x01\x0cprocessed-by\x02\x0dwit-component\x070.201.0\x10wit-bindgen-rust\
\x060.21.0";

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
