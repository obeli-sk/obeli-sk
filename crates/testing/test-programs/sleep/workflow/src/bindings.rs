// Generated by `wit-bindgen` 0.21.0. DO NOT EDIT!
// Options used:
pub mod my_org {
    pub mod workflow_engine {
        #[allow(clippy::all)]
        pub mod host_activities {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            #[allow(unused_unsafe, clippy::all)]
            pub fn sleep(millis: u64) {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "my-org:workflow-engine/host-activities")]
                    extern "C" {
                        #[link_name = "sleep"]
                        fn wit_import(_: i64);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i64) {
                        unreachable!()
                    }
                    wit_import(_rt::as_i64(&millis));
                }
            }
        }
    }
}
pub mod testing {
    pub mod sleep {
        #[allow(clippy::all)]
        pub mod sleep {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            #[allow(unused_unsafe, clippy::all)]
            pub fn sleep(millis: u64) {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "testing:sleep/sleep")]
                    extern "C" {
                        #[link_name = "sleep"]
                        fn wit_import(_: i64);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i64) {
                        unreachable!()
                    }
                    wit_import(_rt::as_i64(&millis));
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn sleep_loop(millis: u64, iterations: u32) {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "testing:sleep/sleep")]
                    extern "C" {
                        #[link_name = "sleep-loop"]
                        fn wit_import(_: i64, _: i32);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i64, _: i32) {
                        unreachable!()
                    }
                    wit_import(_rt::as_i64(&millis), _rt::as_i32(&iterations));
                }
            }
        }
    }
}
pub mod wasi {
    pub mod cli {
        #[allow(clippy::all)]
        pub mod run {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            #[allow(unused_unsafe, clippy::all)]
            /// Run the program.
            pub fn run() -> Result<(), ()> {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:cli/run@0.2.0")]
                    extern "C" {
                        #[link_name = "run"]
                        fn wit_import() -> i32;
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import() -> i32 {
                        unreachable!()
                    }
                    let ret = wit_import();
                    match ret {
                        0 => {
                            let e = ();
                            Ok(e)
                        }
                        1 => {
                            let e = ();
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
        }
    }
}
pub mod exports {
    pub mod testing {
        pub mod sleep_workflow {
            #[allow(clippy::all)]
            pub mod workflow {
                #[used]
                #[doc(hidden)]
                #[cfg(target_arch = "wasm32")]
                static __FORCE_SECTION_REF: fn() =
                    super::super::super::super::__link_custom_section_describing_imports;
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_sleep_host_activity_cabi<T: Guest>(arg0: i64) {
                    T::sleep_host_activity(arg0 as u64);
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_sleep_activity_cabi<T: Guest>(arg0: i64) {
                    T::sleep_activity(arg0 as u64);
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_run_cabi<T: Guest>() {
                    T::run();
                }
                pub trait Guest {
                    fn sleep_host_activity(millis: u64);
                    fn sleep_activity(millis: u64);
                    fn run();
                }
                #[doc(hidden)]

                macro_rules! __export_testing_sleep_workflow_workflow_cabi{
    ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

      #[export_name = "testing:sleep-workflow/workflow#sleep-host-activity"]
      unsafe extern "C" fn export_sleep_host_activity(arg0: i64,) {
        $($path_to_types)*::_export_sleep_host_activity_cabi::<$ty>(arg0)
      }
      #[export_name = "testing:sleep-workflow/workflow#sleep-activity"]
      unsafe extern "C" fn export_sleep_activity(arg0: i64,) {
        $($path_to_types)*::_export_sleep_activity_cabi::<$ty>(arg0)
      }
      #[export_name = "testing:sleep-workflow/workflow#run"]
      unsafe extern "C" fn export_run() {
        $($path_to_types)*::_export_run_cabi::<$ty>()
      }
    };);
  }
                #[doc(hidden)]
                pub(crate) use __export_testing_sleep_workflow_workflow_cabi;
            }
        }
    }
}
mod _rt {

    pub fn as_i64<T: AsI64>(t: T) -> i64 {
        t.as_i64()
    }

    pub trait AsI64 {
        fn as_i64(self) -> i64;
    }

    impl<'a, T: Copy + AsI64> AsI64 for &'a T {
        fn as_i64(self) -> i64 {
            (*self).as_i64()
        }
    }

    impl AsI64 for i64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }

    impl AsI64 for u64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }

    pub fn as_i32<T: AsI32>(t: T) -> i32 {
        t.as_i32()
    }

    pub trait AsI32 {
        fn as_i32(self) -> i32;
    }

    impl<'a, T: Copy + AsI32> AsI32 for &'a T {
        fn as_i32(self) -> i32 {
            (*self).as_i32()
        }
    }

    impl AsI32 for i32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for i16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for i8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for char {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for usize {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    pub unsafe fn invalid_enum_discriminant<T>() -> T {
        if cfg!(debug_assertions) {
            panic!("invalid enum discriminant")
        } else {
            core::hint::unreachable_unchecked()
        }
    }
}

/// Generates `#[no_mangle]` functions to export the specified type as the
/// root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]

macro_rules! __export_any_impl {
  ($ty:ident) => (self::export!($ty with_types_in self););
  ($ty:ident with_types_in $($path_to_types_root:tt)*) => (
  $($path_to_types_root)*::exports::testing::sleep_workflow::workflow::__export_testing_sleep_workflow_workflow_cabi!($ty with_types_in $($path_to_types_root)*::exports::testing::sleep_workflow::workflow);
  )
}
#[doc(inline)]
pub(crate) use __export_any_impl as export;

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.21.0:any:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 469] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xdb\x02\x01A\x02\x01\
A\x08\x01B\x02\x01@\x01\x06millisw\x01\0\x04\0\x05sleep\x01\0\x03\x01&my-org:wor\
kflow-engine/host-activities\x05\0\x01B\x04\x01@\x01\x06millisw\x01\0\x04\0\x05s\
leep\x01\0\x01@\x02\x06millisw\x0aiterationsy\x01\0\x04\0\x0asleep-loop\x01\x01\x03\
\x01\x13testing:sleep/sleep\x05\x01\x01B\x03\x01j\0\0\x01@\0\0\0\x04\0\x03run\x01\
\x01\x03\x01\x12wasi:cli/run@0.2.0\x05\x02\x01B\x05\x01@\x01\x06millisw\x01\0\x04\
\0\x13sleep-host-activity\x01\0\x04\0\x0esleep-activity\x01\0\x01@\0\x01\0\x04\0\
\x03run\x01\x01\x04\x01\x1ftesting:sleep-workflow/workflow\x05\x03\x04\x01\x1ate\
sting:sleep-workflow/any\x04\0\x0b\x09\x01\0\x03any\x03\0\0\0G\x09producers\x01\x0c\
processed-by\x02\x0dwit-component\x070.201.0\x10wit-bindgen-rust\x060.21.0";

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
